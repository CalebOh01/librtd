/* Generated by the Nim Compiler v1.4.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI1188005 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI10491069 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI10920851 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10920848 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10920845 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194645 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10730335 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI2285020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10676017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10676015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5585232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5840011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1188013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI1188015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1194723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1194617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI1194643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194643.node = NNI1194643;
var NNI1194621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194621.node = NNI1194621;
NTI1194723.base = NTI1194617;
NTI1194728.base = NTI1194617;
var NNI1194617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1194723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1188013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1188013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1194728, name: "up", sons: null}]};
NTI1194617.node = NNI1194617;
var NNI1194408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194408.node = NNI1194408;
NTI1194617.base = NTI1194408;
NTI1194621.base = NTI1194617;
NTI1194643.base = NTI1194621;
var NNI1194649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194649.node = NNI1194649;
var NNI1194619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194619.node = NNI1194619;
NTI1194619.base = NTI1194617;
NTI1194649.base = NTI1194619;
var NNI1194637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194637.node = NNI1194637;
var NNI1194633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194633.node = NNI1194633;
NTI1194633.base = NTI1194619;
NTI1194637.base = NTI1194633;
var NNI1194635 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194635.node = NNI1194635;
NTI1194635.base = NTI1194633;
var NNI1194653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194653.node = NNI1194653;
NTI1194653.base = NTI1194619;
var NNI1194641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194641.node = NNI1194641;
NTI1194641.base = NTI1194619;
var NNI5840011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5585232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI5840011.node = NNI5840011;
var NNI10676015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10676015.node = NNI10676015;
NTI10676015.base = NTI1194621;
var NNI10676017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10676017.node = NNI10676017;
NTI10676017.base = NTI1194621;
var NNI2285020 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1188044, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI2285020.node = NNI2285020;
NTI10730335.base = NTI1188044;
var NNI1194645 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194645.node = NNI1194645;
NTI1194645.base = NTI1194643;
var NNI10920851 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI10491069, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1188013, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1188005, name: "Field2", sons: null}]};
NTI10920851.node = NNI10920851;
NTI10920848.base = NTI10920851;
var NNI10920845 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI10920848, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI1188044, name: "counter", sons: null}]};
NTI10920845.node = NNI10920845;
function makeNimstrLit(c_1455062) {
      var ln = c_1455062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1455062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_1455096) {
                    var Tmp5;
            var Tmp7;

  var result_1455097 = null;

    var res_1455170 = newSeq_1455128((s_1455096).length);
    var i_1455172 = 0;
    var j_1455174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1455172 < (s_1455096).length)) break L2;
          var c_1455175 = s_1455096[i_1455172];
          if ((c_1455175 < 128)) {
          res_1455170[j_1455174] = String.fromCharCode(c_1455175);
          i_1455172 += 1;
          }
          else {
            var helper_1455198 = newSeq_1455128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1455199 = c_1455175.toString(16);
                  if ((((code_1455199) == null ? 0 : (code_1455199).length) == 1)) {
                  helper_1455198.push("%0");;
                  }
                  else {
                  helper_1455198.push("%");;
                  }
                  
                  helper_1455198.push(code_1455199);;
                  i_1455172 += 1;
                    if (((s_1455096).length <= i_1455172)) Tmp5 = true; else {                      Tmp5 = (s_1455096[i_1455172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1455175 = s_1455096[i_1455172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1455170[j_1455174] = decodeURIComponent(helper_1455198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1455170[j_1455174] = helper_1455198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1455174 += 1;
        }
    } while(false);
    if (res_1455170.length < j_1455174) { for (var i=res_1455170.length;i<j_1455174;++i) res_1455170.push(null); }
               else { res_1455170.length = j_1455174; };
    result_1455097 = res_1455170.join("");

  return result_1455097;

}
function raiseException(e_1420218, ename_1420219) {
    e_1420218.name = ename_1420219;
    if ((excHandler == 0)) {
    unhandledException(e_1420218);
    }
    
    throw e_1420218;

  
}
function cstrToNimstr(c_1455079) {
      var ln = c_1455079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1455079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1455079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1470023, src_1470024, ti_1470025) {
  var result_1475219 = null;

    switch (ti_1470025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1465401(ti_1470025))) {
      result_1475219 = src_1470024;
      }
      else {
        result_1475219 = [src_1470024[0], src_1470024[1]];
      }
      
      break;
    case 19:
            if (dest_1470023 === null || dest_1470023 === undefined) {
        dest_1470023 = {};
      }
      else {
        for (var key in dest_1470023) { delete dest_1470023[key]; }
      }
      for (var key in src_1470024) { dest_1470023[key] = src_1470024[key]; }
      result_1475219 = dest_1470023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1470025.base == null))) {
      result_1475219 = nimCopy(dest_1470023, src_1470024, ti_1470025.base);
      }
      else {
      if ((ti_1470025.kind == 17)) {
      result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {m_type: ti_1470025} : dest_1470023;
      }
      else {
        result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {} : dest_1470023;
      }
      }
      nimCopyAux(result_1475219, src_1470024, ti_1470025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1470024 === null) {
        result_1475219 = null;
      }
      else {
        if (dest_1470023 === null || dest_1470023 === undefined) {
          dest_1470023 = new Array(src_1470024.length);
        }
        else {
          dest_1470023.length = src_1470024.length;
        }
        result_1475219 = dest_1470023;
        for (var i = 0; i < src_1470024.length; ++i) {
          result_1475219[i] = nimCopy(result_1475219[i], src_1470024[i], ti_1470025.base);
        }
      }
    
      break;
    case 28:
            if (src_1470024 !== null) {
        result_1475219 = src_1470024.slice(0);
      }
    
      break;
    default: 
      result_1475219 = src_1470024;
      break;
    }

  return result_1475219;

}
function chckIndx(i_1480086, a_1480087, b_1480088) {
      var Tmp1;

  var result_1480089 = 0;

  BeforeRet: do {
      if (!(a_1480087 <= i_1480086)) Tmp1 = false; else {        Tmp1 = (i_1480086 <= b_1480088);      }    if (Tmp1) {
    result_1480089 = i_1480086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1480086, a_1480087, b_1480088);
    }
    
  } while (false);

  return result_1480089;

}
function addInt(a_1460419, b_1460420) {
        var result = a_1460419 + b_1460420;
    checkOverflowInt(result);
    return result;
  

  
}
function divInt(a_1460473, b_1460474) {
        if (b_1460474 == 0) raiseDivByZero();
    if (b_1460474 == -1 && a_1460473 == 2147483647) raiseOverflow();
    return Math.trunc(a_1460473 / b_1460474);
  

  
}
function mulInt(a_1460455, b_1460456) {
        var result = a_1460455 * b_1460456;
    checkOverflowInt(result);
    return result;
  

  
}
function chckRange(i_1485016, a_1485017, b_1485018) {
      var Tmp1;

  var result_1485019 = 0;

  BeforeRet: do {
      if (!(a_1485017 <= i_1485016)) Tmp1 = false; else {        Tmp1 = (i_1485016 <= b_1485018);      }    if (Tmp1) {
    result_1485019 = i_1485016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1485019;

}
function subInt(a_1460437, b_1460438) {
        var result = a_1460437 - b_1460438;
    checkOverflowInt(result);
    return result;
  

  
}
function modInt(a_1460491, b_1460492) {
        if (b_1460492 == 0) raiseDivByZero();
    if (b_1460492 == -1 && a_1460491 == 2147483647) raiseOverflow();
    return Math.trunc(a_1460491 % b_1460492);
  

  
}
function eqStrings(a_1460222, b_1460223) {
        if (a_1460222 == b_1460223) return true;
    if (a_1460222 === null && b_1460223.length == 0) return true;
    if (b_1460223 === null && a_1460222.length == 0) return true;
    if ((!a_1460222) || (!b_1460223)) return false;
    var alen = a_1460222.length;
    if (alen != b_1460223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1460222[i] != b_1460223[i]) return false;
    return true;
  

  
}
function mnewString(len_1460044) {
        return new Array(len_1460044);
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);
function nimCharToStr(x_1375674) {
  var result_1375675 = [];

    result_1375675 = nimCopy(null, mnewString(1), NTI1188013);
    result_1375675[0] = x_1375674;

  return result_1375675;

}
function addChar(x_1505031, c_1505032) {
    x_1505031.push(c_1505032);

  
}
function SetCard(a_1460061) {
        var result = 0;
    for (var elem in a_1460061) { ++result; }
    return result;
  

  
}
var ConstSet9 = setConstr([97, 122]);
var ConstSet10 = setConstr([48, 57], 66, [68, 70], [72, 83], [86, 90]);
var ConstSet11 = setConstr([48, 57], 66, [68, 70], [72, 83], [86, 90]);
var ConstSet12 = setConstr([48, 57], 66, [68, 70], [72, 83], [86, 90]);
function nimFloatToString(a_1460649) {
  var result_1460650 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_1460649)) result_1460650 =  a_1460649+".0"
    else {
      result_1460650 = a_1460649+""
      if(nimOnlyDigitsOrMinus(result_1460650)){
        result_1460650 = a_1460649+".0"
      }
    }
  

  return result_1460650;

}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_10495031 = [0];
function add_1357211(x_1357214, x_1357214_Idx, y_1357215) {
          if (x_1357214[x_1357214_Idx] === null) { x_1357214[x_1357214_Idx] = []; }
      var off = x_1357214[x_1357214_Idx].length;
      x_1357214[x_1357214_Idx].length += y_1357215.length;
      for (var i = 0; i < y_1357215.length; ++i) {
        x_1357214[x_1357214_Idx][off+i] = y_1357215.charCodeAt(i);
      }
    

  
}
function newSeq_1455128(len_1455131) {
  var result_1455133 = [];

    result_1455133 = new Array(len_1455131); for (var i=0;i<len_1455131;++i) {result_1455133[i]=null;}
  return result_1455133;

}
function unhandledException(e_1415059) {
    var buf_1415060 = [[]];
    if (!(((e_1415059.message).length == 0))) {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1415060[0].push.apply(buf_1415060[0], e_1415059.message);;
    }
    else {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit(" ["));;
    add_1357211(buf_1415060, 0, e_1415059.name);
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1420201 = toJSStr(buf_1415060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1420201);
  }
  else {
    throw cbuf_1420201;
  }
  

  
}
function len_10920992(t_10920997) {
  var result_10920998 = 0;

    result_10920998 = t_10920997.counter;

  return result_10920998;

}
function isFilled_10566218(hcode_10566220) {
  var result_10566221 = false;

    result_10566221 = !((hcode_10566220 == 0));

  return result_10566221;

}
function isFatPointer_1465401(ti_1465403) {
  var result_1465404 = false;

  BeforeRet: do {
    result_1465404 = !((ConstSet1[ti_1465403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1465404;

}
function nimCopyAux(dest_1470028, src_1470029, n_1470031) {
    switch (n_1470031.kind) {
    case 0:
      break;
    case 1:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1470031.sons.length; i++) {
      nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i]);
    }
    
      break;
    case 3:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
      for (var i = 0; i < n_1470031.sons.length; ++i) {
        nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i][1]);
      }
    
      break;
    }

  
}
function raiseIndexError(i_1440047, a_1440048, b_1440049) {
    var Tmp1;

    if ((b_1440049 < a_1440048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1440047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1440048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1440049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1188013), parent: null, m_type: NTI1194649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function HEX2BHEX3D_10240021(x_10240025, x_10240025_Idx, y_10240026) {
    x_10240025[x_10240025_Idx] = (x_10240025[x_10240025_Idx] + y_10240026);

  
}
function toFloat_1216659(i_1216661) {
  var result_1216662 = 0.0;

    result_1216662 = i_1216661;

  return result_1216662;

}
function push_10666082(s_10666085, x_10666086) {
    if ((s_10666085.n == 0)) {
    s_10666085.min = x_10666086;
    }
    
    s_10666085.n += 1;
    if ((x_10666086 < s_10666085.min)) {
    s_10666085.min = x_10666086;
    }
    
    if ((s_10666085.max < x_10666086)) {
    s_10666085.max = x_10666086;
    }
    
    HEX2BHEX3D_10240021(s_10666085, "sum", x_10666086);
    var n_10670008 = toFloat_1216659(s_10666085.n);
    var delta_10670009 = (x_10666086 - s_10666085.mom1);
    var delta_n_10670010 = (delta_10670009 / toFloat_1216659(s_10666085.n));
    var delta_n2_10670011 = (delta_n_10670010 * delta_n_10670010);
    var term1_10670012 = ((delta_10670009 * delta_n_10670010) * toFloat_1216659((s_10666085.n - 1)));
    HEX2BHEX3D_10240021(s_10666085, "mom4", ((((term1_10670012 * delta_n2_10670011) * (((n_10670008 * n_10670008) - (3.0000000000000000e+00 * n_10670008)) + 3.0000000000000000e+00)) + ((6.0000000000000000e+00 * delta_n2_10670011) * s_10666085.mom2)) - ((4.0000000000000000e+00 * delta_n_10670010) * s_10666085.mom3)));
    HEX2BHEX3D_10240021(s_10666085, "mom3", (((term1_10670012 * delta_n_10670010) * (n_10670008 - 2.0000000000000000e+00)) - ((3.0000000000000000e+00 * delta_n_10670010) * s_10666085.mom2)));
    HEX2BHEX3D_10240021(s_10666085, "mom2", term1_10670012);
    HEX2BHEX3D_10240021(s_10666085, "mom1", delta_n_10670010);

  
}
function push_10670054(s_10670057, x_10670058) {
    push_10666082(s_10670057, toFloat_1216659(x_10670058));

  
}
function push_10930233(s_10930236, x_10930238) {
    L1: do {
      var val_10930271 = null;
      var val_10930271_Idx = 0;
      var i_11025671 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11025671 < (x_10930238).length)) break L3;
            val_10930271 = x_10930238; val_10930271_Idx = i_11025671;
            push_10670054(s_10930236, val_10930271[val_10930271_Idx]);
            i_11025671 += 1;
          }
      } while(false);
    } while(false);

  
}
function nextPowerOfTwo_2480014(x_2480016) {
  var result_2480017 = 0;

    result_2480017 = (x_2480016 - 1);
    result_2480017 = (result_2480017 | (result_2480017 >> 16));
    result_2480017 = (result_2480017 | (result_2480017 >> 8));
    result_2480017 = (result_2480017 | (result_2480017 >> 4));
    result_2480017 = (result_2480017 | (result_2480017 >> 2));
    result_2480017 = (result_2480017 | (result_2480017 >> 1));
    result_2480017 += (1 + ((x_2480016 <= 0) ? 1:0));

  return result_2480017;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1194637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1460403) {
        if (a_1460403 > 2147483647 || a_1460403 < -2147483648) raiseOverflow();
  

  
}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1194635, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function slotsNeeded_10570048(count_10570050) {
  var result_10570051 = 0;

    result_10570051 = nextPowerOfTwo_2480014(addInt(divInt(mulInt(count_10570050, 3), 2), 4));

  return result_10570051;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1194653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function imul_10506082(a_10506084, b_10506085) {
  var result_10506086 = 0;

    var mask_10506087 = 65535;
    var aHi_10506096 = (((a_10506084 >>> 0) >>> 16) & mask_10506087);
    var aLo_10506097 = (a_10506084 & mask_10506087);
    var bHi_10506106 = (((b_10506085 >>> 0) >>> 16) & mask_10506087);
    var bLo_10506107 = (b_10506085 & mask_10506087);
    result_10506086 = ((((aLo_10506097 * bLo_10506107) >>> 0) + (((((aHi_10506096 * bLo_10506107) >>> 0) + ((aLo_10506097 * bHi_10506106) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_10506086;

}
function rotl32_10506201(x_10506203, r_10506204) {
  var result_10506205 = 0;

    result_10506205 = ((x_10506203 << r_10506204) | ((x_10506203 >>> 0) >>> subInt(32, r_10506204)));

  return result_10506205;

}
function murmurHash_10506229(x_10506232) {
  var result_10506233 = 0;

  BeforeRet: do {
    var size_10506243 = (x_10506232).length;
    var stepSize_10506245 = 4;
    var n_10506246 = divInt(size_10506243, stepSize_10506245);
    var h1_10506247 = 0;
    var i_10506249 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10506249 < mulInt(n_10506246, stepSize_10506245))) break L2;
          var k1_10506250 = 0;
          var j_10506251 = stepSize_10506245;
          L3: do {
              L4: while (true) {
              if (!(0 < j_10506251)) break L4;
                j_10506251 = subInt(j_10506251, 1);
                k1_10506250 = ((k1_10506250 << 8) | x_10506232[chckIndx(addInt(i_10506249, j_10506251), 0, (x_10506232).length-1)]);
              }
          } while(false);
          i_10506249 = addInt(i_10506249, stepSize_10506245);
          k1_10506250 = imul_10506082(k1_10506250, 3432918353);
          k1_10506250 = rotl32_10506201(k1_10506250, 15);
          k1_10506250 = imul_10506082(k1_10506250, 461845907);
          h1_10506247 = (h1_10506247 ^ k1_10506250);
          h1_10506247 = rotl32_10506201(h1_10506247, 13);
          h1_10506247 = ((((h1_10506247 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    var k1_10510207 = 0;
    var rem_10510208 = modInt(size_10506243, stepSize_10506245);
    L5: do {
        L6: while (true) {
        if (!(0 < rem_10510208)) break L6;
          rem_10510208 = subInt(rem_10510208, 1);
          k1_10510207 = ((k1_10510207 << 8) | x_10506232[chckIndx(addInt(i_10506249, rem_10510208), 0, (x_10506232).length-1)]);
        }
    } while(false);
    k1_10510207 = imul_10506082(k1_10510207, 3432918353);
    k1_10510207 = rotl32_10506201(k1_10510207, 15);
    k1_10510207 = imul_10506082(k1_10510207, 461845907);
    h1_10506247 = (h1_10506247 ^ k1_10510207);
    h1_10506247 = (h1_10506247 ^ size_10506243);
    h1_10506247 = (h1_10506247 ^ ((h1_10506247 >>> 0) >>> 16));
    h1_10506247 = imul_10506082(h1_10506247, 2246822507);
    h1_10506247 = (h1_10506247 ^ ((h1_10506247 >>> 0) >>> 13));
    h1_10506247 = imul_10506082(h1_10506247, 3266489909);
    h1_10506247 = (h1_10506247 ^ ((h1_10506247 >>> 0) >>> 16));
    result_10506233 = (h1_10506247|0);
    break BeforeRet;
  } while (false);

  return result_10506233;

}
function hash_10545214(x_10545216) {
  var result_10545217 = 0;

    result_10545217 = murmurHash_10506229((x_10545216.slice(0, (x_10545216).length - 1+1)));

  return result_10545217;

}
function nextTry_10570014(h_10570016, maxHash_10570017) {
  var result_10570018 = 0;

    result_10570018 = (addInt(h_10570016, 1) & maxHash_10570017);

  return result_10570018;

}
function rawGet_10950602(t_10950606, key_10950607, hc_10950608, hc_10950608_Idx) {
            var Tmp3;

  var result_10950609 = 0;

  BeforeRet: do {
    hc_10950608[hc_10950608_Idx] = hash_10545214(key_10950607);
    if ((hc_10950608[hc_10950608_Idx] == 0)) {
    hc_10950608[hc_10950608_Idx] = 314159265;
    }
    
    if (((t_10950606.data).length == 0)) {
    result_10950609 = -1;
    break BeforeRet;
    }
    
    var h_10960138 = (hc_10950608[hc_10950608_Idx] & (t_10950606.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10566218(t_10950606.data[chckIndx(h_10960138, 0, (t_10950606.data).length-1)].Field0)) break L2;
            if (!(t_10950606.data[chckIndx(h_10960138, 0, (t_10950606.data).length-1)].Field0 == hc_10950608[hc_10950608_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10950606.data[chckIndx(h_10960138, 0, (t_10950606.data).length-1)].Field1, key_10950607);            }          if (Tmp3) {
          result_10950609 = h_10960138;
          break BeforeRet;
          }
          
          h_10960138 = nextTry_10570014(h_10960138, (t_10950606.data).length - 1);
        }
    } while(false);
    result_10950609 = subInt(-1, h_10960138);
  } while (false);

  return result_10950609;

}
function sysFatal_1305418(message_1305422) {
    raiseException({message: nimCopy(null, message_1305422, NTI1188013), m_type: NTI1194641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1305414(msg_1305416) {
    sysFatal_1305418(msg_1305416);

  
}
function failedAssertImpl_1305480(msg_1305482) {
    raiseAssert_1305414(msg_1305482);

  
}
function mustRehash_10975601(t_10975604) {
  var result_10975605 = false;

    if (!((t_10975604.counter < (t_10975604.data).length))) {
    failedAssertImpl_1305480(makeNimstrLit("hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_10975605 = ((mulInt((t_10975604.data).length, 2) < mulInt(t_10975604.counter, 3)) || (subInt((t_10975604.data).length, t_10975604.counter) < 4));

  return result_10975605;

}
function rawInsert_11001108(t_11001114, data_11001117, data_11001117_Idx, key_11001118, val_11001120, hc_11001121, h_11001122) {
    data_11001117[data_11001117_Idx][chckIndx(h_11001122, 0, (data_11001117[data_11001117_Idx]).length-1)].Field1 = nimCopy(null, key_11001118, NTI1188013);
    data_11001117[data_11001117_Idx][chckIndx(h_11001122, 0, (data_11001117[data_11001117_Idx]).length-1)].Field2 = val_11001120;
    data_11001117[data_11001117_Idx][chckIndx(h_11001122, 0, (data_11001117[data_11001117_Idx]).length-1)].Field0 = hc_11001121;

  
}
function enlarge_11000161(t_11000167) {
    var n_11000175 = [];
    n_11000175 = new Array(chckRange(mulInt((t_11000167.data).length, 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_11000167.data).length, 2), 0, 2147483647);++i) {n_11000175[i]={Field0: 0, Field1: [], Field2: 0.0};}    var Tmp1 = t_11000167.data; t_11000167.data = n_11000175; n_11000175 = Tmp1;    L2: do {
      var i_11000334 = 0;
      var colontmp__11025686 = 0;
      colontmp__11025686 = (n_11000175).length - 1;
      var res_11025691 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_11025691 <= colontmp__11025686)) break L4;
            i_11000334 = res_11025691;
            var eh_11000483 = n_11000175[chckIndx(i_11000334, 0, (n_11000175).length-1)].Field0;
            if (isFilled_10566218(eh_11000483)) {
            var j_11000490 = (eh_11000483 & (t_11000167.data).length - 1);
            L5: do {
                L6: while (true) {
                if (!isFilled_10566218(t_11000167.data[chckIndx(j_11000490, 0, (t_11000167.data).length-1)].Field0)) break L6;
                  j_11000490 = nextTry_10570014(j_11000490, (t_11000167.data).length - 1);
                }
            } while(false);
            rawInsert_11001108(t_11000167, t_11000167, "data", n_11000175[chckIndx(i_11000334, 0, (n_11000175).length-1)].Field1, n_11000175[chckIndx(i_11000334, 0, (n_11000175).length-1)].Field2, eh_11000483, j_11000490);
            }
            
            res_11025691 = addInt(res_11025691, 1);
          }
      } while(false);
    } while(false);

  
}
function rawGetKnownHC_11001609(t_11001613, key_11001614, hc_11001615) {
  var result_11001616 = 0;

  BeforeRet: do {
    if (((t_11001613.data).length == 0)) {
    result_11001616 = -1;
    break BeforeRet;
    }
    
    var h_11005138 = (hc_11001615 & (t_11001613.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10566218(t_11001613.data[chckIndx(h_11005138, 0, (t_11001613.data).length-1)].Field0)) break L2;
          if (((t_11001613.data[chckIndx(h_11005138, 0, (t_11001613.data).length-1)].Field0 == hc_11001615) && eqStrings(t_11001613.data[chckIndx(h_11005138, 0, (t_11001613.data).length-1)].Field1, key_11001614))) {
          result_11001616 = h_11005138;
          break BeforeRet;
          }
          
          h_11005138 = nextTry_10570014(h_11005138, (t_11001613.data).length - 1);
        }
    } while(false);
    result_11001616 = subInt(-1, h_11005138);
  } while (false);

  return result_11001616;

}
function HEX5BHEX5DHEX3D_10935043(t_10935049, key_10935050, val_10935052) {
    if (((t_10935049.data).length == 0)) {
    var correctSizeHEX60gensym51_10945001 = slotsNeeded_10570048(32);
    t_10935049.counter = 0;
    t_10935049.data = new Array(chckRange(correctSizeHEX60gensym51_10945001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym51_10945001, 0, 2147483647);++i) {t_10935049.data[i]={Field0: 0, Field1: [], Field2: 0.0};}    }
    
    var hc_10950601 = [0];
    var index_10960635 = rawGet_10950602(t_10935049, key_10935050, hc_10950601, 0);
    if ((0 <= index_10960635)) {
    t_10935049.data[chckIndx(index_10960635, 0, (t_10935049.data).length-1)].Field2 = val_10935052;
    }
    else {
      if (((t_10935049.data).length == 0)) {
      var correctSizeHEX60gensym56_10970001 = slotsNeeded_10570048(32);
      t_10935049.counter = 0;
      t_10935049.data = new Array(chckRange(correctSizeHEX60gensym56_10970001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym56_10970001, 0, 2147483647);++i) {t_10935049.data[i]={Field0: 0, Field1: [], Field2: 0.0};}      }
      
      if (mustRehash_10975601(t_10935049)) {
      enlarge_11000161(t_10935049);
      index_10960635 = rawGetKnownHC_11001609(t_10935049, key_10935050, hc_10950601[0]);
      }
      
      index_10960635 = subInt(-1, index_10960635);
      rawInsert_11001108(t_10935049, t_10935049, "data", key_10935050, val_10935052, hc_10950601[0], index_10960635);
      t_10935049.counter = addInt(t_10935049.counter, 1);
    }
    

  
}
function parseSaturatedNatural_1965017(s_1965019, b_1965021, b_1965021_Idx, start_1965022) {
      var Tmp1;
          var Tmp4;

  var result_1965024 = 0;

    var i_1965025 = start_1965022;
    if (((i_1965025 < (s_1965019).length) && (s_1965019[chckIndx(i_1965025, 0, (s_1965019).length-1)] == 43))) {
    i_1965025 = addInt(i_1965025, 1);
    }
    
      if (!(i_1965025 < (s_1965019).length)) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_1965019[chckIndx(i_1965025, 0, (s_1965019).length-1)]] != undefined);      }    if (Tmp1) {
    b_1965021[b_1965021_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_1965025 < (s_1965019).length)) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_1965019[chckIndx(i_1965025, 0, (s_1965019).length-1)]] != undefined);          }        if (!Tmp4) break L3;
          var c_1975016 = subInt(s_1965019[chckIndx(i_1965025, 0, (s_1965019).length-1)], 48);
          if ((b_1965021[b_1965021_Idx] <= divInt(subInt(2147483647, c_1975016), 10))) {
          b_1965021[b_1965021_Idx] = addInt(mulInt(b_1965021[b_1965021_Idx], 10), c_1975016);
          }
          else {
            b_1965021[b_1965021_Idx] = 2147483647;
          }
          
          i_1965025 = addInt(i_1965025, 1);
          L5: do {
              L6: while (true) {
              if (!((i_1965025 < (s_1965019).length) && (s_1965019[chckIndx(i_1965025, 0, (s_1965019).length-1)] == 95))) break L6;
                i_1965025 = addInt(i_1965025, 1);
              }
          } while(false);
        }
    } while(false);
    result_1965024 = subInt(i_1965025, start_1965022);
    }
    

  return result_1965024;

}
function HEX5BHEX5D_5840068(s_5840072, x_5840074) {
  var result_5840075 = [];

    var a_5840201 = x_5840074.a;
    var L_5840401 = addInt(subInt(subInt((s_5840072).length, x_5840074.b), a_5840201), 1);
    result_5840075 = nimCopy(null, mnewString(chckRange(L_5840401, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_5840409 = 0;
      var i_11025710 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11025710 < L_5840401)) break L3;
            i_5840409 = i_11025710;
            result_5840075[chckIndx(i_5840409, 0, (result_5840075).length-1)] = s_5840072[chckIndx(addInt(i_5840409, a_5840201), 0, (s_5840072).length-1)];
            i_11025710 = addInt(i_11025710, 1);
          }
      } while(false);
    } while(false);

  return result_5840075;

}
function HEX2EHEX2E_5840001(a_5840006, b_5840008) {
  var result_5840014 = ({a: 0, b: 0});

    nimCopy(result_5840014, {a: a_5840006, b: b_5840008}, NTI5840011);

  return result_5840014;

}
function parseStandardFormatSpecifier_10375322(s_10375324, start_10375325, ignoreUnknownSuffix_10375327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10375328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_10375328.fill = 32;
    result_10375328.align = 0;
    result_10375328.sign = 45;
    var i_10375331 = start_10375325;
    if (((addInt(i_10375331, 1) < (s_10375324).length) && (ConstSet2[s_10375324[chckIndx(addInt(i_10375331, 1), 0, (s_10375324).length-1)]] != undefined))) {
    result_10375328.fill = s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)];
    result_10375328.align = s_10375324[chckIndx(addInt(i_10375331, 1), 0, (s_10375324).length-1)];
    i_10375331 = addInt(i_10375331, 2);
    }
    else {
    if (((i_10375331 < (s_10375324).length) && (ConstSet3[s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)]] != undefined))) {
    result_10375328.align = s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)];
    i_10375331 = addInt(i_10375331, 1);
    }
    }
    if (((i_10375331 < (s_10375324).length) && (ConstSet4[s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)]] != undefined))) {
    result_10375328.sign = s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)];
    i_10375331 = addInt(i_10375331, 1);
    }
    
    if (((i_10375331 < (s_10375324).length) && (s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)] == 35))) {
    result_10375328.alternateForm = true;
    i_10375331 = addInt(i_10375331, 1);
    }
    
      if (!((addInt(i_10375331, 1) < (s_10375324).length) && (s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_10375324[chckIndx(addInt(i_10375331, 1), 0, (s_10375324).length-1)]] != undefined);      }    if (Tmp1) {
    result_10375328.padWithZero = true;
    i_10375331 = addInt(i_10375331, 1);
    }
    
    var parsedLength_10395015 = parseSaturatedNatural_1965017(s_10375324, result_10375328, "minimumWidth", i_10375331);
    i_10375331 = addInt(i_10375331, parsedLength_10395015);
    if (((i_10375331 < (s_10375324).length) && (s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)] == 46))) {
    i_10375331 = addInt(i_10375331, 1);
    var parsedLengthB_10395029 = parseSaturatedNatural_1965017(s_10375324, result_10375328, "precision", i_10375331);
    i_10375331 = addInt(i_10375331, parsedLengthB_10395029);
    }
    else {
      result_10375328.precision = -1;
    }
    
      if (!(i_10375331 < (s_10375324).length)) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)]] != undefined);      }    if (Tmp2) {
    result_10375328.typ = s_10375324[chckIndx(i_10375331, 0, (s_10375324).length-1)];
    i_10375331 = addInt(i_10375331, 1);
    }
    
    result_10375328.endPosition = i_10375331;
      if (!!((i_10375331 == (s_10375324).length))) Tmp3 = false; else {        Tmp3 = !(ignoreUnknownSuffix_10375327);      }    if (Tmp3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_5840068(s_10375324, HEX2EHEX2E_5840001(i_10375331, 1)) || []), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_10375328;

}
function nucruneLen(s_2513025) {
  var result_2513026 = 0;

    result_2513026 = 0;
    var i_2513028 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2513028 < (s_2513025).length)) break L2;
          if ((s_2513025[chckIndx(i_2513028, 0, (s_2513025).length-1)] <= 127)) {
          i_2513028 = addInt(i_2513028, 1);
          }
          else {
          if ((((s_2513025[chckIndx(i_2513028, 0, (s_2513025).length-1)] >>> 0) >>> 5) == 6)) {
          i_2513028 = addInt(i_2513028, 2);
          }
          else {
          if ((((s_2513025[chckIndx(i_2513028, 0, (s_2513025).length-1)] >>> 0) >>> 4) == 14)) {
          i_2513028 = addInt(i_2513028, 3);
          }
          else {
          if ((((s_2513025[chckIndx(i_2513028, 0, (s_2513025).length-1)] >>> 0) >>> 3) == 30)) {
          i_2513028 = addInt(i_2513028, 4);
          }
          else {
          if ((((s_2513025[chckIndx(i_2513028, 0, (s_2513025).length-1)] >>> 0) >>> 2) == 62)) {
          i_2513028 = addInt(i_2513028, 5);
          }
          else {
          if ((((s_2513025[chckIndx(i_2513028, 0, (s_2513025).length-1)] >>> 0) >>> 1) == 126)) {
          i_2513028 = addInt(i_2513028, 6);
          }
          else {
          i_2513028 = addInt(i_2513028, 1);
          }
          }}}}}
          result_2513026 = addInt(result_2513026, 1);
        }
    } while(false);

  return result_2513026;

}
function runeLenAt_2513127(s_2513129, i_2513130) {
  var result_2513131 = 0;

    if ((s_2513129[chckIndx(i_2513130, 0, (s_2513129).length-1)] <= 127)) {
    result_2513131 = 1;
    }
    else {
    if ((((s_2513129[chckIndx(i_2513130, 0, (s_2513129).length-1)] >>> 0) >>> 5) == 6)) {
    result_2513131 = 2;
    }
    else {
    if ((((s_2513129[chckIndx(i_2513130, 0, (s_2513129).length-1)] >>> 0) >>> 4) == 14)) {
    result_2513131 = 3;
    }
    else {
    if ((((s_2513129[chckIndx(i_2513130, 0, (s_2513129).length-1)] >>> 0) >>> 3) == 30)) {
    result_2513131 = 4;
    }
    else {
    if ((((s_2513129[chckIndx(i_2513130, 0, (s_2513129).length-1)] >>> 0) >>> 2) == 62)) {
    result_2513131 = 5;
    }
    else {
    if ((((s_2513129[chckIndx(i_2513130, 0, (s_2513129).length-1)] >>> 0) >>> 1) == 126)) {
    result_2513131 = 6;
    }
    else {
      result_2513131 = 1;
    }
    }}}}}

  return result_2513131;

}
function runeOffset_3135259(s_3135261, pos_3135262, start_3135263) {
  var result_3135264 = 0;

  BeforeRet: do {
    var i_3135266 = 0;
    var o_3135267 = start_3135263;
    L1: do {
        L2: while (true) {
        if (!(i_3135266 < pos_3135262)) break L2;
          o_3135267 = addInt(o_3135267, chckRange(runeLenAt_2513127(s_3135261, o_3135267), 0, 2147483647));
          if (((s_3135261).length <= o_3135267)) {
          result_3135264 = -1;
          break BeforeRet;
          }
          
          i_3135266 = addInt(i_3135266, 1);
        }
    } while(false);
    result_3135264 = o_3135267;
    break BeforeRet;
  } while (false);

  return result_3135264;

}
function validateUtf8_2755244(s_2755246) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_2755247 = 0;

  BeforeRet: do {
    var i_2755249 = 0;
    var L_2755250 = (s_2755246).length;
    L1: do {
        L2: while (true) {
        if (!(i_2755249 < L_2755250)) break L2;
          if ((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] <= 127)) {
          i_2755249 = addInt(i_2755249, 1);
          }
          else {
          if ((((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] >>> 0) >>> 5) == 6)) {
          if ((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] < 194)) {
          result_2755247 = i_2755249;
          break BeforeRet;
          }
          
            if (!(addInt(i_2755249, 1) < L_2755250)) Tmp3 = false; else {              Tmp3 = (((s_2755246[chckIndx(addInt(i_2755249, 1), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_2755249 = addInt(i_2755249, 2);
          }
          else {
            result_2755247 = i_2755249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_2755249, 2) < L_2755250)) Tmp5 = false; else {              Tmp5 = (((s_2755246[chckIndx(addInt(i_2755249, 1), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_2755246[chckIndx(addInt(i_2755249, 2), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_2755249 = addInt(i_2755249, 3);
          }
          else {
            result_2755247 = i_2755249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2755246[chckIndx(i_2755249, 0, (s_2755246).length-1)] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_2755249, 3) < L_2755250)) Tmp8 = false; else {              Tmp8 = (((s_2755246[chckIndx(addInt(i_2755249, 1), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_2755246[chckIndx(addInt(i_2755249, 2), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_2755246[chckIndx(addInt(i_2755249, 3), 0, (s_2755246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_2755249 = addInt(i_2755249, 4);
          }
          else {
            result_2755247 = i_2755249;
            break BeforeRet;
          }
          
          }
          else {
            result_2755247 = i_2755249;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_2755247 = -1;
    break BeforeRet;
  } while (false);

  return result_2755247;

}
function nsuRepeatChar(c_9890124, count_9890125) {
  var result_9890126 = [];

    result_9890126 = nimCopy(null, mnewString(count_9890125), NTI1188013);
    L1: do {
      var i_9890135 = 0;
      var colontmp__11025741 = 0;
      colontmp__11025741 = subInt(count_9890125, 1);
      var res_11025742 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11025742 <= colontmp__11025741)) break L3;
            i_9890135 = res_11025742;
            result_9890126[chckIndx(i_9890135, 0, (result_9890126).length-1)] = c_9890124;
            res_11025742 = addInt(res_11025742, 1);
          }
      } while(false);
    } while(false);

  return result_9890126;

}
function alignString_10375222(s_10375224, minimumWidth_10375225, align_10375226, fill_10375227) {
      var Tmp1;

  var result_10375228 = [];

    if ((minimumWidth_10375225 == 0)) {
    result_10375228 = nimCopy(null, s_10375224, NTI1188013);
    }
    else {
      if ((validateUtf8_2755244(s_10375224) == -1)) {
      Tmp1 = nucruneLen(s_10375224);
      }
      else {
      Tmp1 = (s_10375224).length;
      }
      
      var sRuneLen_10375229 = Tmp1;
      var toFill_10375230 = subInt(minimumWidth_10375225, sRuneLen_10375229);
      if ((toFill_10375230 <= 0)) {
      result_10375228 = nimCopy(null, s_10375224, NTI1188013);
      }
      else {
      if (((align_10375226 == 60) || (align_10375226 == 0))) {
      result_10375228 = nimCopy(null, (s_10375224 || []).concat(nsuRepeatChar(fill_10375227, chckRange(toFill_10375230, 0, 2147483647)) || []), NTI1188013);
      }
      else {
      if ((align_10375226 == 94)) {
      var half_10375231 = divInt(toFill_10375230, 2);
      result_10375228 = nimCopy(null, (nsuRepeatChar(fill_10375227, chckRange(half_10375231, 0, 2147483647)) || []).concat(s_10375224 || [],nsuRepeatChar(fill_10375227, chckRange(subInt(toFill_10375230, half_10375231), 0, 2147483647)) || []), NTI1188013);
      }
      else {
        result_10375228 = nimCopy(null, (nsuRepeatChar(fill_10375227, chckRange(toFill_10375230, 0, 2147483647)) || []).concat(s_10375224 || []), NTI1188013);
      }
      }}
    }
    

  return result_10375228;

}
function formatValue_10420080(result_10420083, result_10420083_Idx, value_10420084, specifier_10420085) {
    var spec_10420086 = parseStandardFormatSpecifier_10375322(specifier_10420085, 0, false);
    var value_10420087 = nimCopy(null, value_10420084, NTI1188013);
    switch (spec_10420086.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_10420086.typ]), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_10420086.precision == -1))) {
    if ((spec_10420086.precision < nucruneLen(value_10420087))) {
    (value_10420087.length = chckRange(runeOffset_3135259(value_10420087, chckRange(spec_10420086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    result_10420083[result_10420083_Idx].push.apply(result_10420083[result_10420083_Idx], alignString_10375222(value_10420087, spec_10420086.minimumWidth, spec_10420086.align, spec_10420086.fill));;

  
}
function mean_10670083(s_10670085) {
  var result_10670086 = 0.0;

    result_10670086 = s_10670085.mom1;

  return result_10670086;

}
function variance_10670100(s_10670102) {
  var result_10670103 = 0.0;

    result_10670103 = (s_10670102.mom2 / toFloat_1216659(s_10670102.n));

  return result_10670103;

}
function standardDeviation_10675014(s_10675016) {
  var result_10675017 = 0.0;

    result_10675017 = Math.sqrt(variance_10670100(s_10675016));

  return result_10675017;

}
function returnTimeDistribution_10920824(returnTimes_10920835) {
  var result_10920858 = [({data: [], counter: 0})];

    L1: do {
      var kmer_10930229 = [];
      var value_10930230 = [];
      var L_11025652 = len_10920992(returnTimes_10920835);
      L2: do {
        var h_11025654 = 0;
        var colontmp__11025655 = 0;
        colontmp__11025655 = (returnTimes_10920835.data).length - 1;
        var res_11025656 = 0;
        L3: do {
            L4: while (true) {
            if (!(res_11025656 <= colontmp__11025655)) break L4;
              h_11025654 = res_11025656;
              if (isFilled_10566218(returnTimes_10920835.data[chckIndx(h_11025654, 0, (returnTimes_10920835.data).length-1)].Field0)) {
              kmer_10930229 = returnTimes_10920835.data[chckIndx(h_11025654, 0, (returnTimes_10920835.data).length-1)].Field1;
              value_10930230 = returnTimes_10920835.data[chckIndx(h_11025654, 0, (returnTimes_10920835.data).length-1)].Field2;
              var statistics_10930231 = [({n: 0, min: 0.0, max: 0.0, sum: 0.0, mom1: 0.0, mom2: 0.0, mom3: 0.0, mom4: 0.0})];
              push_10930233(statistics_10930231[0], value_10930230);
              var fmtRes_10930369 = [mnewString(0)];
              formatValue_10420080(fmtRes_10930369, 0, kmer_10930229, []);
              fmtRes_10930369[0].push.apply(fmtRes_10930369[0], makeNimstrLit("_mean"));;
              HEX5BHEX5DHEX3D_10935043(result_10920858[0], fmtRes_10930369[0], mean_10670083(statistics_10930231[0]));
              var fmtRes_11005719 = [mnewString(0)];
              formatValue_10420080(fmtRes_11005719, 0, kmer_10930229, []);
              fmtRes_11005719[0].push.apply(fmtRes_11005719[0], makeNimstrLit("_std"));;
              HEX5BHEX5DHEX3D_10935043(result_10920858[0], fmtRes_11005719[0], standardDeviation_10675014(statistics_10930231[0]));
              if (!((len_10920992(returnTimes_10920835) == L_11025652))) {
              failedAssertImpl_1305480(makeNimstrLit("tables.nim(681, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_11025656 = addInt(res_11025656, 1);
            }
        } while(false);
      } while(false);
    } while(false);

  return result_10920858[0];

}
function initTable_10730359(initialSize_10730363) {
  var result_10730379 = ({data: [], counter: 0});

    var correctSizeHEX60gensym10_10735001 = slotsNeeded_10570048(chckRange(initialSize_10730363, 0, 2147483647));
    result_10730379.counter = 0;
    result_10730379.data = new Array(chckRange(correctSizeHEX60gensym10_10735001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym10_10735001, 0, 2147483647);++i) {result_10730379.data[i]={Field0: 0, Field1: [], Field2: 0};}
  return result_10730379;

}
function mkDigit_10366054(v_10366056, typ_10366057) {
      var Tmp1;

  var result_10366058 = [];

    if (!((v_10366056 < 26))) {
    failedAssertImpl_1305480(makeNimstrLit("strformat.nim(315, 9) `v < 26` "));
    }
    
    if ((v_10366056 < 10)) {
    result_10366058 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_10366056), 0, 255)), NTI1188013);
    }
    else {
      if ((typ_10366057 == 120)) {
      Tmp1 = 97;
      }
      else {
      Tmp1 = 65;
      }
      
      result_10366058 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_10366056), 10), 0, 255)), NTI1188013);
    }
    

  return result_10366058;

}
function formatInt_10690002(n_10690005, radix_10690006, spec_10690007) {
    var Tmp7;

  var result_10690008 = [];

    var v_10690201 = n_10690005;
    var negative_10690202 = (v_10690201 < 0);
    if (negative_10690202) {
    v_10690201 = mulInt(v_10690201, -1);
    }
    
    var xx_10690203 = [];
    if (spec_10690007.alternateForm) {
    switch (spec_10690007.typ) {
    case 88:
      xx_10690203 = nimCopy(null, makeNimstrLit("0x"), NTI1188013);
      break;
    case 120:
      xx_10690203 = nimCopy(null, makeNimstrLit("0x"), NTI1188013);
      break;
    case 98:
      xx_10690203 = nimCopy(null, makeNimstrLit("0b"), NTI1188013);
      break;
    case 111:
      xx_10690203 = nimCopy(null, makeNimstrLit("0o"), NTI1188013);
      break;
    default: 
      break;
    }
    }
    
    if ((v_10690201 == 0)) {
    result_10690008 = nimCopy(null, makeNimstrLit("0"), NTI1188013);
    }
    else {
      result_10690008 = nimCopy(null, [], NTI1188013);
      L1: do {
          L2: while (true) {
          if (!(0 < v_10690201)) break L2;
            var d_10690206 = modInt(v_10690201, radix_10690006);
            v_10690201 = divInt(v_10690201, radix_10690006);
            result_10690008.push.apply(result_10690008, mkDigit_10366054(chckRange(d_10690206, -2147483648, 2147483647), spec_10690007.typ));;
          }
      } while(false);
      L3: do {
        var idx_10690215 = 0;
        var colontmp__11025811 = 0;
        colontmp__11025811 = divInt((result_10690008).length, 2);
        var i_11025812 = 0;
        L4: do {
            L5: while (true) {
            if (!(i_11025812 < colontmp__11025811)) break L5;
              idx_10690215 = i_11025812;
              var Tmp6 = result_10690008[chckIndx(idx_10690215, 0, (result_10690008).length-1)]; result_10690008[chckIndx(idx_10690215, 0, (result_10690008).length-1)] = result_10690008[chckIndx(subInt(subInt((result_10690008).length, idx_10690215), 1), 0, (result_10690008).length-1)]; result_10690008[chckIndx(subInt(subInt((result_10690008).length, idx_10690215), 1), 0, (result_10690008).length-1)] = Tmp6;              i_11025812 = addInt(i_11025812, 1);
            }
        } while(false);
      } while(false);
    }
    
    if (spec_10690007.padWithZero) {
    if (negative_10690202) Tmp7 = true; else {      Tmp7 = !((spec_10690007.sign == 45));    }    var sign_10700008 = Tmp7;
    var toFill_10700013 = subInt(subInt(subInt(spec_10690007.minimumWidth, (result_10690008).length), (xx_10690203).length), (sign_10700008 ? 1:0));
    if ((0 < toFill_10700013)) {
    result_10690008 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_10700013, 0, 2147483647)) || []).concat(result_10690008 || []), NTI1188013);
    }
    
    }
    
    if (negative_10690202) {
    result_10690008 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_10690203 || [],result_10690008 || []), NTI1188013);
    }
    else {
    if (!((spec_10690007.sign == 45))) {
    result_10690008 = nimCopy(null, [spec_10690007.sign].concat(xx_10690203 || [],result_10690008 || []), NTI1188013);
    }
    else {
      result_10690008 = nimCopy(null, (xx_10690203 || []).concat(result_10690008 || []), NTI1188013);
    }
    }
    if ((spec_10690007.align == 60)) {
    L8: do {
      var i_10700019 = 0;
      var colontmp__11025815 = 0;
      colontmp__11025815 = (result_10690008).length;
      var i_11025816 = colontmp__11025815;
      L9: do {
          L10: while (true) {
          if (!(i_11025816 < spec_10690007.minimumWidth)) break L10;
            i_10700019 = i_11025816;
            addChar(result_10690008, spec_10690007.fill);;
            i_11025816 = addInt(i_11025816, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      var toFill_10700020 = subInt(spec_10690007.minimumWidth, (result_10690008).length);
      if ((spec_10690007.align == 94)) {
      var half_10700021 = divInt(toFill_10700020, 2);
      result_10690008 = nimCopy(null, (nsuRepeatChar(spec_10690007.fill, chckRange(half_10700021, 0, 2147483647)) || []).concat(result_10690008 || [],nsuRepeatChar(spec_10690007.fill, chckRange(subInt(toFill_10700020, half_10700021), 0, 2147483647)) || []), NTI1188013);
      }
      else {
        if ((0 < toFill_10700020)) {
        result_10690008 = nimCopy(null, (nsuRepeatChar(spec_10690007.fill, chckRange(toFill_10700020, 0, 2147483647)) || []).concat(result_10690008 || []), NTI1188013);
        }
        
      }
      
    }
    

  return result_10690008;

}
function formatValue_10685002(result_10685005, result_10685005_Idx, value_10685006, specifier_10685007) {
  BeforeRet: do {
    if (((specifier_10685007).length == 0)) {
    result_10685005[result_10685005_Idx].push.apply(result_10685005[result_10685005_Idx], cstrToNimstr((value_10685006)+""));;
    break BeforeRet;
    }
    
    var spec_10685008 = parseStandardFormatSpecifier_10375322(specifier_10685007, 0, false);
    var radix_10685010 = 10;
    switch (spec_10685008.typ) {
    case 120:
    case 88:
      radix_10685010 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_10685010 = 2;
      break;
    case 111:
      radix_10685010 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_10685008.typ]), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_10685005[result_10685005_Idx].push.apply(result_10685005[result_10685005_Idx], formatInt_10690002(value_10685006, radix_10685010, spec_10685008));;
  } while (false);

  
}
function formatValue_10700056(result_10700059, result_10700059_Idx, value_10700060, specifier_10700061) {
  BeforeRet: do {
    if (((specifier_10700061).length == 0)) {
    result_10700059[result_10700059_Idx].push.apply(result_10700059[result_10700059_Idx], cstrToNimstr((value_10700060)+""));;
    break BeforeRet;
    }
    
    var spec_10700062 = parseStandardFormatSpecifier_10375322(specifier_10700061, 0, false);
    var radix_10700064 = 10;
    switch (spec_10700062.typ) {
    case 120:
    case 88:
      radix_10700064 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_10700064 = 2;
      break;
    case 111:
      radix_10700064 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_10700062.typ]), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_10700059[result_10700059_Idx].push.apply(result_10700059[result_10700059_Idx], formatInt_10690002(value_10700060, radix_10700064, spec_10700062));;
  } while (false);

  
}
function nsuCountCharSet(s_10090042, subs_10090044) {
  var result_10090045 = 0;

    if (!((0 < SetCard(subs_10090044)))) {
    failedAssertImpl_1305480(makeNimstrLit("strutils.nim(2096, 12) `card(subs) > 0` "));
    }
    
    result_10090045 = 0;
    L1: do {
      var c_10105202 = 0;
      var i_11025820 = 0;
      var L_11025821 = (s_10090042).length;
      L2: do {
          L3: while (true) {
          if (!(i_11025820 < L_11025821)) break L3;
            c_10105202 = s_10090042[chckIndx(i_11025820, 0, (s_10090042).length-1)];
            if ((subs_10090044[c_10105202] != undefined)) {
            result_10090045 = addInt(result_10090045, 1);
            }
            
            i_11025820 = addInt(i_11025820, 1);
            if (!(((s_10090042).length == L_11025821))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(222, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);

  return result_10090045;

}
function nsuToUpperAsciiChar(c_9380016) {
  var result_9380017 = 0;

    if ((ConstSet9[c_9380016] != undefined)) {
    result_9380017 = chckRange(subInt(c_9380016, 32), 0, 255);
    }
    else {
      result_9380017 = c_9380016;
    }
    

  return result_9380017;

}
function nsuToUpperAsciiStr(s_9385037) {
  var result_9385038 = [];

    result_9385038 = nimCopy(null, mnewString(chckRange((s_9385037).length, 0, 2147483647)), NTI1188013);
    L1: do {
      var iHEX60gensym11_9390009 = 0;
      var colontmp__11025824 = 0;
      colontmp__11025824 = subInt((s_9385037).length, 1);
      var res_11025825 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11025825 <= colontmp__11025824)) break L3;
            iHEX60gensym11_9390009 = res_11025825;
            result_9385038[chckIndx(iHEX60gensym11_9390009, 0, (result_9385038).length-1)] = nsuToUpperAsciiChar(s_9385037[chckIndx(iHEX60gensym11_9390009, 0, (s_9385037).length-1)]);
            res_11025825 = addInt(res_11025825, 1);
          }
      } while(false);
    } while(false);

  return result_9385038;

}
function HEX5BHEX5D_3390283(s_3390287, x_3390289) {
  var result_3390290 = [];

    var a_3390401 = x_3390289.a;
    var L_3390601 = addInt(subInt(x_3390289.b, a_3390401), 1);
    result_3390290 = nimCopy(null, mnewString(chckRange(L_3390601, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_3390609 = 0;
      var i_11025833 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11025833 < L_3390601)) break L3;
            i_3390609 = i_11025833;
            result_3390290[chckIndx(i_3390609, 0, (result_3390290).length-1)] = s_3390287[chckIndx(addInt(i_3390609, a_3390401), 0, (s_3390287).length-1)];
            i_11025833 = addInt(i_11025833, 1);
          }
      } while(false);
    } while(false);

  return result_3390290;

}
function HEX2EHEX2E_3390220(a_3390225, b_3390227) {
  var result_3390229 = ({a: 0, b: 0});

    nimCopy(result_3390229, {a: a_3390225, b: b_3390227}, NTI2285020);

  return result_3390229;

}
function len_10905214(t_10905219) {
  var result_10905220 = 0;

    result_10905220 = t_10905219.counter;

  return result_10905220;

}
function rawGet_10775602(t_10775606, key_10775607, hc_10775608, hc_10775608_Idx) {
            var Tmp3;

  var result_10775609 = 0;

  BeforeRet: do {
    hc_10775608[hc_10775608_Idx] = hash_10545214(key_10775607);
    if ((hc_10775608[hc_10775608_Idx] == 0)) {
    hc_10775608[hc_10775608_Idx] = 314159265;
    }
    
    if (((t_10775606.data).length == 0)) {
    result_10775609 = -1;
    break BeforeRet;
    }
    
    var h_10785138 = (hc_10775608[hc_10775608_Idx] & (t_10775606.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10566218(t_10775606.data[chckIndx(h_10785138, 0, (t_10775606.data).length-1)].Field0)) break L2;
            if (!(t_10775606.data[chckIndx(h_10785138, 0, (t_10775606.data).length-1)].Field0 == hc_10775608[hc_10775608_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10775606.data[chckIndx(h_10785138, 0, (t_10775606.data).length-1)].Field1, key_10775607);            }          if (Tmp3) {
          result_10775609 = h_10785138;
          break BeforeRet;
          }
          
          h_10785138 = nextTry_10570014(h_10785138, (t_10775606.data).length - 1);
        }
    } while(false);
    result_10775609 = subInt(-1, h_10785138);
  } while (false);

  return result_10775609;

}
function mustRehash_10800601(t_10800604) {
  var result_10800605 = false;

    if (!((t_10800604.counter < (t_10800604.data).length))) {
    failedAssertImpl_1305480(makeNimstrLit("hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_10800605 = ((mulInt((t_10800604.data).length, 2) < mulInt(t_10800604.counter, 3)) || (subInt((t_10800604.data).length, t_10800604.counter) < 4));

  return result_10800605;

}
function rawInsert_10826108(t_10826114, data_10826117, data_10826117_Idx, key_10826118, val_10826120, hc_10826121, h_10826122) {
    data_10826117[data_10826117_Idx][chckIndx(h_10826122, 0, (data_10826117[data_10826117_Idx]).length-1)].Field1 = nimCopy(null, key_10826118, NTI1188013);
    data_10826117[data_10826117_Idx][chckIndx(h_10826122, 0, (data_10826117[data_10826117_Idx]).length-1)].Field2 = nimCopy(null, val_10826120, NTI10730335);
    data_10826117[data_10826117_Idx][chckIndx(h_10826122, 0, (data_10826117[data_10826117_Idx]).length-1)].Field0 = hc_10826121;

  
}
function enlarge_10825161(t_10825167) {
    var n_10825175 = [];
    n_10825175 = new Array(chckRange(mulInt((t_10825167.data).length, 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10825167.data).length, 2), 0, 2147483647);++i) {n_10825175[i]={Field0: 0, Field1: [], Field2: []};}    var Tmp1 = t_10825167.data; t_10825167.data = n_10825175; n_10825175 = Tmp1;    L2: do {
      var i_10825334 = 0;
      var colontmp__11025840 = 0;
      colontmp__11025840 = (n_10825175).length - 1;
      var res_11025841 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_11025841 <= colontmp__11025840)) break L4;
            i_10825334 = res_11025841;
            var eh_10825483 = n_10825175[chckIndx(i_10825334, 0, (n_10825175).length-1)].Field0;
            if (isFilled_10566218(eh_10825483)) {
            var j_10825490 = (eh_10825483 & (t_10825167.data).length - 1);
            L5: do {
                L6: while (true) {
                if (!isFilled_10566218(t_10825167.data[chckIndx(j_10825490, 0, (t_10825167.data).length-1)].Field0)) break L6;
                  j_10825490 = nextTry_10570014(j_10825490, (t_10825167.data).length - 1);
                }
            } while(false);
            rawInsert_10826108(t_10825167, t_10825167, "data", n_10825175[chckIndx(i_10825334, 0, (n_10825175).length-1)].Field1, n_10825175[chckIndx(i_10825334, 0, (n_10825175).length-1)].Field2, eh_10825483, j_10825490);
            }
            
            res_11025841 = addInt(res_11025841, 1);
          }
      } while(false);
    } while(false);

  
}
function rawGetKnownHC_10826609(t_10826613, key_10826614, hc_10826615) {
  var result_10826616 = 0;

  BeforeRet: do {
    if (((t_10826613.data).length == 0)) {
    result_10826616 = -1;
    break BeforeRet;
    }
    
    var h_10830138 = (hc_10826615 & (t_10826613.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10566218(t_10826613.data[chckIndx(h_10830138, 0, (t_10826613.data).length-1)].Field0)) break L2;
          if (((t_10826613.data[chckIndx(h_10830138, 0, (t_10826613.data).length-1)].Field0 == hc_10826615) && eqStrings(t_10826613.data[chckIndx(h_10830138, 0, (t_10826613.data).length-1)].Field1, key_10826614))) {
          result_10826616 = h_10830138;
          break BeforeRet;
          }
          
          h_10830138 = nextTry_10570014(h_10830138, (t_10826613.data).length - 1);
        }
    } while(false);
    result_10826616 = subInt(-1, h_10830138);
  } while (false);

  return result_10826616;

}
function hasKeyOrPut_10760128(t_10760134, key_10760135, val_10760136) {
  var result_10760137 = false;

    if (((t_10760134.data).length == 0)) {
    var correctSizeHEX60gensym17_10770001 = slotsNeeded_10570048(32);
    t_10760134.counter = 0;
    t_10760134.data = new Array(chckRange(correctSizeHEX60gensym17_10770001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym17_10770001, 0, 2147483647);++i) {t_10760134.data[i]={Field0: 0, Field1: [], Field2: []};}    }
    
    var hc_10775601 = [0];
    var index_10785635 = rawGet_10775602(t_10760134, key_10760135, hc_10775601, 0);
    if ((index_10785635 < 0)) {
    result_10760137 = false;
    if (((t_10760134.data).length == 0)) {
    var correctSizeHEX60gensym22_10795001 = slotsNeeded_10570048(32);
    t_10760134.counter = 0;
    t_10760134.data = new Array(chckRange(correctSizeHEX60gensym22_10795001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym22_10795001, 0, 2147483647);++i) {t_10760134.data[i]={Field0: 0, Field1: [], Field2: []};}    }
    
    if (mustRehash_10800601(t_10760134)) {
    enlarge_10825161(t_10760134);
    index_10785635 = rawGetKnownHC_10826609(t_10760134, key_10760135, hc_10775601[0]);
    }
    
    index_10785635 = subInt(-1, index_10785635);
    rawInsert_10826108(t_10760134, t_10760134, "data", key_10760135, val_10760136, hc_10775601[0], index_10785635);
    t_10760134.counter = addInt(t_10760134.counter, 1);
    }
    else {
      result_10760137 = true;
    }
    

  return result_10760137;

}
function rawGet_10745136(t_10745140, key_10745141, hc_10745142, hc_10745142_Idx) {
            var Tmp3;

  var result_10745143 = 0;

  BeforeRet: do {
    hc_10745142[hc_10745142_Idx] = hash_10545214(key_10745141);
    if ((hc_10745142[hc_10745142_Idx] == 0)) {
    hc_10745142[hc_10745142_Idx] = 314159265;
    }
    
    if (((t_10745140.data).length == 0)) {
    result_10745143 = -1;
    break BeforeRet;
    }
    
    var h_10755138 = (hc_10745142[hc_10745142_Idx] & (t_10745140.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10566218(t_10745140.data[chckIndx(h_10755138, 0, (t_10745140.data).length-1)].Field0)) break L2;
            if (!(t_10745140.data[chckIndx(h_10755138, 0, (t_10745140.data).length-1)].Field0 == hc_10745142[hc_10745142_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10745140.data[chckIndx(h_10755138, 0, (t_10745140.data).length-1)].Field1, key_10745141);            }          if (Tmp3) {
          result_10745143 = h_10755138;
          break BeforeRet;
          }
          
          h_10755138 = nextTry_10570014(h_10755138, (t_10745140.data).length - 1);
        }
    } while(false);
    result_10745143 = subInt(-1, h_10755138);
  } while (false);

  return result_10745143;

}
function HEX5BHEX5D_10755807(t_10755813, key_10755814) {
  var result_10755816 = null;
  var result_10755816_Idx = 0;

    var hcHEX60gensym22_10755817 = [0];
    var indexHEX60gensym22_10755826 = rawGet_10745136(t_10755813, key_10755814, hcHEX60gensym22_10755817, 0);
    if ((0 <= indexHEX60gensym22_10755826)) {
    result_10755816 = t_10755813.data[chckIndx(indexHEX60gensym22_10755826, 0, (t_10755813.data).length-1)]; result_10755816_Idx = "Field2";
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_10755814 || []), parent: null, m_type: NTI1194645, name: null, trace: [], up: null}, "KeyError");
    }
    

  return [result_10755816, result_10755816_Idx];

}
function HEX5BHEX5D_10830795(t_10830801, key_10830802) {
  var result_10830804 = null;
  var result_10830804_Idx = 0;

    var hcHEX60gensym22_10830805 = [0];
    var indexHEX60gensym22_10830814 = rawGet_10775602(t_10830801, key_10830802, hcHEX60gensym22_10830805, 0);
    if ((0 <= indexHEX60gensym22_10830814)) {
    result_10830804 = t_10830801.data[chckIndx(indexHEX60gensym22_10830814, 0, (t_10830801.data).length-1)]; result_10830804_Idx = "Field2";
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_10830802 || []), parent: null, m_type: NTI1194645, name: null, trace: [], up: null}, "KeyError");
    }
    

  return [result_10830804, result_10830804_Idx];

}
function mustRehash_10865601(t_10865604) {
  var result_10865605 = false;

    if (!((t_10865604.counter < (t_10865604.data).length))) {
    failedAssertImpl_1305480(makeNimstrLit("hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_10865605 = ((mulInt((t_10865604.data).length, 2) < mulInt(t_10865604.counter, 3)) || (subInt((t_10865604.data).length, t_10865604.counter) < 4));

  return result_10865605;

}
function rawInsert_10891108(t_10891114, data_10891117, data_10891117_Idx, key_10891118, val_10891120, hc_10891121, h_10891122) {
    data_10891117[data_10891117_Idx][chckIndx(h_10891122, 0, (data_10891117[data_10891117_Idx]).length-1)].Field1 = nimCopy(null, key_10891118, NTI1188013);
    data_10891117[data_10891117_Idx][chckIndx(h_10891122, 0, (data_10891117[data_10891117_Idx]).length-1)].Field2 = val_10891120;
    data_10891117[data_10891117_Idx][chckIndx(h_10891122, 0, (data_10891117[data_10891117_Idx]).length-1)].Field0 = hc_10891121;

  
}
function enlarge_10890161(t_10890167) {
    var n_10890175 = [];
    n_10890175 = new Array(chckRange(mulInt((t_10890167.data).length, 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10890167.data).length, 2), 0, 2147483647);++i) {n_10890175[i]={Field0: 0, Field1: [], Field2: 0};}    var Tmp1 = t_10890167.data; t_10890167.data = n_10890175; n_10890175 = Tmp1;    L2: do {
      var i_10890334 = 0;
      var colontmp__11025852 = 0;
      colontmp__11025852 = (n_10890175).length - 1;
      var res_11025853 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_11025853 <= colontmp__11025852)) break L4;
            i_10890334 = res_11025853;
            var eh_10890483 = n_10890175[chckIndx(i_10890334, 0, (n_10890175).length-1)].Field0;
            if (isFilled_10566218(eh_10890483)) {
            var j_10890490 = (eh_10890483 & (t_10890167.data).length - 1);
            L5: do {
                L6: while (true) {
                if (!isFilled_10566218(t_10890167.data[chckIndx(j_10890490, 0, (t_10890167.data).length-1)].Field0)) break L6;
                  j_10890490 = nextTry_10570014(j_10890490, (t_10890167.data).length - 1);
                }
            } while(false);
            rawInsert_10891108(t_10890167, t_10890167, "data", n_10890175[chckIndx(i_10890334, 0, (n_10890175).length-1)].Field1, n_10890175[chckIndx(i_10890334, 0, (n_10890175).length-1)].Field2, eh_10890483, j_10890490);
            }
            
            res_11025853 = addInt(res_11025853, 1);
          }
      } while(false);
    } while(false);

  
}
function rawGetKnownHC_10891594(t_10891598, key_10891599, hc_10891600) {
  var result_10891601 = 0;

  BeforeRet: do {
    if (((t_10891598.data).length == 0)) {
    result_10891601 = -1;
    break BeforeRet;
    }
    
    var h_10895138 = (hc_10891600 & (t_10891598.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10566218(t_10891598.data[chckIndx(h_10895138, 0, (t_10891598.data).length-1)].Field0)) break L2;
          if (((t_10891598.data[chckIndx(h_10895138, 0, (t_10891598.data).length-1)].Field0 == hc_10891600) && eqStrings(t_10891598.data[chckIndx(h_10895138, 0, (t_10891598.data).length-1)].Field1, key_10891599))) {
          result_10891601 = h_10895138;
          break BeforeRet;
          }
          
          h_10895138 = nextTry_10570014(h_10895138, (t_10891598.data).length - 1);
        }
    } while(false);
    result_10891601 = subInt(-1, h_10895138);
  } while (false);

  return result_10891601;

}
function HEX5BHEX5DHEX3D_10835299(t_10835305, key_10835306, val_10835308) {
    if (((t_10835305.data).length == 0)) {
    var correctSizeHEX60gensym32_10845001 = slotsNeeded_10570048(32);
    t_10835305.counter = 0;
    t_10835305.data = new Array(chckRange(correctSizeHEX60gensym32_10845001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym32_10845001, 0, 2147483647);++i) {t_10835305.data[i]={Field0: 0, Field1: [], Field2: 0};}    }
    
    var hc_10850601 = [0];
    var index_10850610 = rawGet_10745136(t_10835305, key_10835306, hc_10850601, 0);
    if ((0 <= index_10850610)) {
    t_10835305.data[chckIndx(index_10850610, 0, (t_10835305.data).length-1)].Field2 = val_10835308;
    }
    else {
      if (((t_10835305.data).length == 0)) {
      var correctSizeHEX60gensym35_10860001 = slotsNeeded_10570048(32);
      t_10835305.counter = 0;
      t_10835305.data = new Array(chckRange(correctSizeHEX60gensym35_10860001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym35_10860001, 0, 2147483647);++i) {t_10835305.data[i]={Field0: 0, Field1: [], Field2: 0};}      }
      
      if (mustRehash_10865601(t_10835305)) {
      enlarge_10890161(t_10835305);
      index_10850610 = rawGetKnownHC_10891594(t_10835305, key_10835306, hc_10850601[0]);
      }
      
      index_10850610 = subInt(-1, index_10850610);
      rawInsert_10891108(t_10835305, t_10835305, "data", key_10835306, val_10835308, hc_10850601[0], index_10850610);
      t_10835305.counter = addInt(t_10835305.counter, 1);
    }
    

  
}
function pairwiseKmerReturnTimes_10905057(x_10905059, k_10905060) {
        var Tmp2;
                          var Tmp10;
                        var Tmp11;
                        var Tmp12;
                            var Tmp20;
                          var Tmp21;
                          var Tmp22;

  var result_10905070 = [({data: [], counter: 0})];

    var lastIndex_10905079 = [initTable_10730359(32)];
    L1: do {
      var i_10905080 = 0;
      var kmer_10905081 = [];
      if (((x_10905059).length < k_10905060)) {
      var fmtRes_11025785 = [mnewString(0)];
      fmtRes_11025785[0].push.apply(fmtRes_11025785[0], makeNimstrLit("Unable to generate "));;
      formatValue_10685002(fmtRes_11025785, 0, k_10905060, []);
      fmtRes_11025785[0].push.apply(fmtRes_11025785[0], makeNimstrLit("-mers since "));;
      formatValue_10685002(fmtRes_11025785, 0, k_10905060, []);
      fmtRes_11025785[0].push.apply(fmtRes_11025785[0], makeNimstrLit(" is longer than the input sequence, which is "));;
      formatValue_10700056(fmtRes_11025785, 0, (x_10905059).length, []);
      fmtRes_11025785[0].push.apply(fmtRes_11025785[0], makeNimstrLit(" bases long"));;
      raiseException({message: nimCopy(null, fmtRes_11025785[0], NTI1188013), parent: null, m_type: NTI10676015, name: null, trace: [], up: null}, "InvalidKmerLengthError");
      }
      
        if (!(0 < nsuCountCharSet(nsuToUpperAsciiStr(x_10905059), ConstSet10))) Tmp2 = false; else {          Tmp2 = true;        }      if (Tmp2) {
      raiseException({message: makeNimstrLit("Degenerate bases do not have defined RTD."), parent: null, m_type: NTI10676017, name: null, trace: [], up: null}, "DegenerateBaseError");
      }
      
      if (false) {
      L3: do {
        var i_11025788 = 0;
        var colontmp__11025789 = 0;
        colontmp__11025789 = subInt((x_10905059).length, k_10905060);
        var res_11025790 = 0;
        L4: do {
            L5: while (true) {
            if (!(res_11025790 <= colontmp__11025789)) break L5;
              i_11025788 = res_11025790;
              i_10905080 = i_11025788;
              kmer_10905081 = nsuToUpperAsciiStr(HEX5BHEX5D_3390283(x_10905059, HEX2EHEX2E_3390220(i_11025788, subInt(addInt(i_11025788, k_10905060), 1))));
              L6: do {
                var kmer2_10915214 = [];
                var L_11025756 = len_10905214(lastIndex_10905079[0]);
                L7: do {
                  var h_11025758 = 0;
                  var colontmp__11025759 = 0;
                  colontmp__11025759 = (lastIndex_10905079[0].data).length - 1;
                  var res_11025760 = 0;
                  L8: do {
                      L9: while (true) {
                      if (!(res_11025760 <= colontmp__11025759)) break L9;
                        h_11025758 = res_11025760;
                        if (isFilled_10566218(lastIndex_10905079[0].data[chckIndx(h_11025758, 0, (lastIndex_10905079[0].data).length-1)].Field0)) {
                        kmer2_10915214 = lastIndex_10905079[0].data[chckIndx(h_11025758, 0, (lastIndex_10905079[0].data).length-1)].Field1;
                        if (hasKeyOrPut_10760128(result_10905070[0], (kmer_10905081 || []).concat(makeNimstrLit("_") || [],kmer2_10915214 || []), [subInt((Tmp10 = HEX5BHEX5D_10755807(lastIndex_10905079[0], kmer2_10915214), Tmp10)[0][Tmp10[1]], i_10905080)])) {
                        (Tmp11 = HEX5BHEX5D_10830795(result_10905070[0], (kmer_10905081 || []).concat(makeNimstrLit("_") || [],kmer2_10915214 || [])), Tmp11)[0][Tmp11[1]].push(subInt((Tmp12 = HEX5BHEX5D_10755807(lastIndex_10905079[0], kmer2_10915214), Tmp12)[0][Tmp12[1]], i_10905080));;
                        }
                        
                        if (!((len_10905214(lastIndex_10905079[0]) == L_11025756))) {
                        failedAssertImpl_1305480(makeNimstrLit("tables.nim(724, 13) `len(t) == L` the length of the table changed while iterating over it"));
                        }
                        
                        }
                        
                        res_11025760 = addInt(res_11025760, 1);
                      }
                  } while(false);
                } while(false);
              } while(false);
              HEX5BHEX5DHEX3D_10835299(lastIndex_10905079[0], kmer_10905081, i_10905080);
              res_11025790 = addInt(res_11025790, 1);
            }
        } while(false);
      } while(false);
      }
      else {
        L13: do {
          var i_11025795 = 0;
          var colontmp__11025796 = 0;
          colontmp__11025796 = subInt((x_10905059).length, k_10905060);
          var res_11025797 = colontmp__11025796;
          L14: do {
              L15: while (true) {
              if (!(0 <= res_11025797)) break L15;
                i_11025795 = res_11025797;
                i_10905080 = i_11025795;
                kmer_10905081 = nsuToUpperAsciiStr(HEX5BHEX5D_3390283(x_10905059, HEX2EHEX2E_3390220(i_11025795, subInt(addInt(i_11025795, k_10905060), 1))));
                L16: do {
                  var kmer2_11025801 = [];
                  var L_11025802 = len_10905214(lastIndex_10905079[0]);
                  L17: do {
                    var h_11025803 = 0;
                    var colontmp__11025804 = 0;
                    colontmp__11025804 = (lastIndex_10905079[0].data).length - 1;
                    var res_11025805 = 0;
                    L18: do {
                        L19: while (true) {
                        if (!(res_11025805 <= colontmp__11025804)) break L19;
                          h_11025803 = res_11025805;
                          if (isFilled_10566218(lastIndex_10905079[0].data[chckIndx(h_11025803, 0, (lastIndex_10905079[0].data).length-1)].Field0)) {
                          kmer2_11025801 = lastIndex_10905079[0].data[chckIndx(h_11025803, 0, (lastIndex_10905079[0].data).length-1)].Field1;
                          if (hasKeyOrPut_10760128(result_10905070[0], (kmer_10905081 || []).concat(makeNimstrLit("_") || [],kmer2_11025801 || []), [subInt((Tmp20 = HEX5BHEX5D_10755807(lastIndex_10905079[0], kmer2_11025801), Tmp20)[0][Tmp20[1]], i_10905080)])) {
                          (Tmp21 = HEX5BHEX5D_10830795(result_10905070[0], (kmer_10905081 || []).concat(makeNimstrLit("_") || [],kmer2_11025801 || [])), Tmp21)[0][Tmp21[1]].push(subInt((Tmp22 = HEX5BHEX5D_10755807(lastIndex_10905079[0], kmer2_11025801), Tmp22)[0][Tmp22[1]], i_10905080));;
                          }
                          
                          if (!((len_10905214(lastIndex_10905079[0]) == L_11025802))) {
                          failedAssertImpl_1305480(makeNimstrLit("tables.nim(724, 13) `len(t) == L` the length of the table changed while iterating over it"));
                          }
                          
                          }
                          
                          res_11025805 = addInt(res_11025805, 1);
                        }
                    } while(false);
                  } while(false);
                } while(false);
                HEX5BHEX5DHEX3D_10835299(lastIndex_10905079[0], kmer_10905081, i_10905080);
                res_11025797 = subInt(res_11025797, 1);
              }
          } while(false);
        } while(false);
      }
      
    } while(false);

  return result_10905070[0];

}
function reverseComplement_10895694(x_10895696) {
  var result_10895697 = null;

  BeforeRet: do {
    var res_10895698 = mnewString(chckRange(((x_10895696) == null ? 0 : (x_10895696).length), 0, 2147483647));
    var i_10895699 = ((x_10895696) == null ? -1 : (x_10895696).length - 1);
    var j_10895701 = 0;
    L1: do {
        L2: while (true) {
        if (!(0 <= i_10895699)) break L2;
          if ((x_10895696.charCodeAt(chckIndx(j_10895701, 0, (x_10895696).length-1)) == 65)) {
          res_10895698[chckIndx(i_10895699, 0, (res_10895698).length-1)] = 84;
          }
          else {
          if ((x_10895696.charCodeAt(chckIndx(j_10895701, 0, (x_10895696).length-1)) == 84)) {
          res_10895698[chckIndx(i_10895699, 0, (res_10895698).length-1)] = 65;
          }
          else {
          if ((x_10895696.charCodeAt(chckIndx(j_10895701, 0, (x_10895696).length-1)) == 71)) {
          res_10895698[chckIndx(i_10895699, 0, (res_10895698).length-1)] = 67;
          }
          else {
          if ((x_10895696.charCodeAt(chckIndx(j_10895701, 0, (x_10895696).length-1)) == 67)) {
          res_10895698[chckIndx(i_10895699, 0, (res_10895698).length-1)] = 71;
          }
          else {
            raiseException({message: makeNimstrLit("Invalid character in sequence"), parent: null, m_type: NTI1194621, name: null, trace: [], up: null}, "CatchableError");
          }
          }}}
          j_10895701 = addInt(j_10895701, 1);
          i_10895699 = subInt(i_10895699, 1);
        }
    } while(false);
    result_10895697 = toJSStr(res_10895698);
    break BeforeRet;
  } while (false);

  return result_10895697;

}
function hasKey_10745127(t_10745132, key_10745133) {
  var result_10745134 = false;

    var hc_10745135 = [0];
    result_10745134 = (0 <= rawGet_10745136(t_10745132, key_10745133, hc_10745135, 0));

  return result_10745134;

}
function contains_10745117(t_10745122, key_10745123) {
  var result_10745124 = false;

  BeforeRet: do {
    result_10745124 = hasKey_10745127(t_10745122, key_10745123);
    break BeforeRet;
  } while (false);

  return result_10745124;

}
function reverseComplementReturnTimes_10915915(x_10915917, k_10915918) {
        var Tmp2;
                var Tmp6;
                  var Tmp7;
              var Tmp8;
              var Tmp9;
                  var Tmp13;
                    var Tmp14;
                var Tmp15;
                var Tmp16;

  var result_10915928 = [({data: [], counter: 0})];

    var lastIndex_10915937 = [initTable_10730359(32)];
    var rc_10915938 = [];
    L1: do {
      var i_10915939 = 0;
      var kmer_10915940 = [];
      if (((x_10915917).length < k_10915918)) {
      var fmtRes_11025861 = [mnewString(0)];
      fmtRes_11025861[0].push.apply(fmtRes_11025861[0], makeNimstrLit("Unable to generate "));;
      formatValue_10685002(fmtRes_11025861, 0, k_10915918, []);
      fmtRes_11025861[0].push.apply(fmtRes_11025861[0], makeNimstrLit("-mers since "));;
      formatValue_10685002(fmtRes_11025861, 0, k_10915918, []);
      fmtRes_11025861[0].push.apply(fmtRes_11025861[0], makeNimstrLit(" is longer than the input sequence, which is "));;
      formatValue_10700056(fmtRes_11025861, 0, (x_10915917).length, []);
      fmtRes_11025861[0].push.apply(fmtRes_11025861[0], makeNimstrLit(" bases long"));;
      raiseException({message: nimCopy(null, fmtRes_11025861[0], NTI1188013), parent: null, m_type: NTI10676015, name: null, trace: [], up: null}, "InvalidKmerLengthError");
      }
      
        if (!(0 < nsuCountCharSet(nsuToUpperAsciiStr(x_10915917), ConstSet11))) Tmp2 = false; else {          Tmp2 = true;        }      if (Tmp2) {
      raiseException({message: makeNimstrLit("Degenerate bases do not have defined RTD."), parent: null, m_type: NTI10676017, name: null, trace: [], up: null}, "DegenerateBaseError");
      }
      
      if (false) {
      L3: do {
        var i_11025864 = 0;
        var colontmp__11025865 = 0;
        colontmp__11025865 = subInt((x_10915917).length, k_10915918);
        var res_11025866 = 0;
        L4: do {
            L5: while (true) {
            if (!(res_11025866 <= colontmp__11025865)) break L5;
              i_11025864 = res_11025866;
              i_10915939 = i_11025864;
              kmer_10915940 = nsuToUpperAsciiStr(HEX5BHEX5D_3390283(x_10915917, HEX2EHEX2E_3390220(i_11025864, subInt(addInt(i_11025864, k_10915918), 1))));
              rc_10915938 = nimCopy(null, cstrToNimstr(reverseComplement_10895694(toJSStr(kmer_10915940))), NTI1188013);
                if (!contains_10745117(lastIndex_10915937[0], rc_10915938)) Tmp6 = false; else {                  Tmp6 = hasKeyOrPut_10760128(result_10915928[0], (kmer_10915940 || []).concat(makeNimstrLit("_rc") || []), [subInt((Tmp7 = HEX5BHEX5D_10755807(lastIndex_10915937[0], rc_10915938), Tmp7)[0][Tmp7[1]], i_10915939)]);                }              if (Tmp6) {
              (Tmp8 = HEX5BHEX5D_10830795(result_10915928[0], (kmer_10915940 || []).concat(makeNimstrLit("_rc") || [])), Tmp8)[0][Tmp8[1]].push(subInt((Tmp9 = HEX5BHEX5D_10755807(lastIndex_10915937[0], rc_10915938), Tmp9)[0][Tmp9[1]], i_10915939));;
              }
              
              HEX5BHEX5DHEX3D_10835299(lastIndex_10915937[0], kmer_10915940, i_10915939);
              res_11025866 = addInt(res_11025866, 1);
            }
        } while(false);
      } while(false);
      }
      else {
        L10: do {
          var i_11025871 = 0;
          var colontmp__11025872 = 0;
          colontmp__11025872 = subInt((x_10915917).length, k_10915918);
          var res_11025873 = colontmp__11025872;
          L11: do {
              L12: while (true) {
              if (!(0 <= res_11025873)) break L12;
                i_11025871 = res_11025873;
                i_10915939 = i_11025871;
                kmer_10915940 = nsuToUpperAsciiStr(HEX5BHEX5D_3390283(x_10915917, HEX2EHEX2E_3390220(i_11025871, subInt(addInt(i_11025871, k_10915918), 1))));
                rc_10915938 = nimCopy(null, cstrToNimstr(reverseComplement_10895694(toJSStr(kmer_10915940))), NTI1188013);
                  if (!contains_10745117(lastIndex_10915937[0], rc_10915938)) Tmp13 = false; else {                    Tmp13 = hasKeyOrPut_10760128(result_10915928[0], (kmer_10915940 || []).concat(makeNimstrLit("_rc") || []), [subInt((Tmp14 = HEX5BHEX5D_10755807(lastIndex_10915937[0], rc_10915938), Tmp14)[0][Tmp14[1]], i_10915939)]);                  }                if (Tmp13) {
                (Tmp15 = HEX5BHEX5D_10830795(result_10915928[0], (kmer_10915940 || []).concat(makeNimstrLit("_rc") || [])), Tmp15)[0][Tmp15[1]].push(subInt((Tmp16 = HEX5BHEX5D_10755807(lastIndex_10915937[0], rc_10915938), Tmp16)[0][Tmp16[1]], i_10915939));;
                }
                
                HEX5BHEX5DHEX3D_10835299(lastIndex_10915937[0], kmer_10915940, i_10915939);
                res_11025873 = subInt(res_11025873, 1);
              }
          } while(false);
        } while(false);
      }
      
    } while(false);

  return result_10915928[0];

}
function sameKmerReturnTimes_10730328(x_10730330, k_10730331) {
        var Tmp2;
                var Tmp6;
                  var Tmp7;
              var Tmp8;
              var Tmp9;
                  var Tmp13;
                    var Tmp14;
                var Tmp15;
                var Tmp16;

  var result_10730356 = [({data: [], counter: 0})];

    var lastIndex_10740629 = [initTable_10730359(32)];
    L1: do {
      var i_10740630 = 0;
      var kmer_10740631 = [];
      if (((x_10730330).length < k_10730331)) {
      var fmtRes_11025881 = [mnewString(0)];
      fmtRes_11025881[0].push.apply(fmtRes_11025881[0], makeNimstrLit("Unable to generate "));;
      formatValue_10685002(fmtRes_11025881, 0, k_10730331, []);
      fmtRes_11025881[0].push.apply(fmtRes_11025881[0], makeNimstrLit("-mers since "));;
      formatValue_10685002(fmtRes_11025881, 0, k_10730331, []);
      fmtRes_11025881[0].push.apply(fmtRes_11025881[0], makeNimstrLit(" is longer than the input sequence, which is "));;
      formatValue_10700056(fmtRes_11025881, 0, (x_10730330).length, []);
      fmtRes_11025881[0].push.apply(fmtRes_11025881[0], makeNimstrLit(" bases long"));;
      raiseException({message: nimCopy(null, fmtRes_11025881[0], NTI1188013), parent: null, m_type: NTI10676015, name: null, trace: [], up: null}, "InvalidKmerLengthError");
      }
      
        if (!(0 < nsuCountCharSet(nsuToUpperAsciiStr(x_10730330), ConstSet12))) Tmp2 = false; else {          Tmp2 = true;        }      if (Tmp2) {
      raiseException({message: makeNimstrLit("Degenerate bases do not have defined RTD."), parent: null, m_type: NTI10676017, name: null, trace: [], up: null}, "DegenerateBaseError");
      }
      
      if (true) {
      L3: do {
        var i_11025884 = 0;
        var colontmp__11025885 = 0;
        colontmp__11025885 = subInt((x_10730330).length, k_10730331);
        var res_11025886 = 0;
        L4: do {
            L5: while (true) {
            if (!(res_11025886 <= colontmp__11025885)) break L5;
              i_11025884 = res_11025886;
              i_10740630 = i_11025884;
              kmer_10740631 = nsuToUpperAsciiStr(HEX5BHEX5D_3390283(x_10730330, HEX2EHEX2E_3390220(i_11025884, subInt(addInt(i_11025884, k_10730331), 1))));
                if (!contains_10745117(lastIndex_10740629[0], kmer_10740631)) Tmp6 = false; else {                  Tmp6 = hasKeyOrPut_10760128(result_10730356[0], kmer_10740631, [subInt(i_10740630, (Tmp7 = HEX5BHEX5D_10755807(lastIndex_10740629[0], kmer_10740631), Tmp7)[0][Tmp7[1]])]);                }              if (Tmp6) {
              (Tmp8 = HEX5BHEX5D_10830795(result_10730356[0], kmer_10740631), Tmp8)[0][Tmp8[1]].push(subInt(i_10740630, (Tmp9 = HEX5BHEX5D_10755807(lastIndex_10740629[0], kmer_10740631), Tmp9)[0][Tmp9[1]]));;
              }
              
              HEX5BHEX5DHEX3D_10835299(lastIndex_10740629[0], kmer_10740631, i_10740630);
              res_11025886 = addInt(res_11025886, 1);
            }
        } while(false);
      } while(false);
      }
      else {
        L10: do {
          var i_11025891 = 0;
          var colontmp__11025892 = 0;
          colontmp__11025892 = subInt((x_10730330).length, k_10730331);
          var res_11025893 = colontmp__11025892;
          L11: do {
              L12: while (true) {
              if (!(0 <= res_11025893)) break L12;
                i_11025891 = res_11025893;
                i_10740630 = i_11025891;
                kmer_10740631 = nsuToUpperAsciiStr(HEX5BHEX5D_3390283(x_10730330, HEX2EHEX2E_3390220(i_11025891, subInt(addInt(i_11025891, k_10730331), 1))));
                  if (!contains_10745117(lastIndex_10740629[0], kmer_10740631)) Tmp13 = false; else {                    Tmp13 = hasKeyOrPut_10760128(result_10730356[0], kmer_10740631, [subInt(i_10740630, (Tmp14 = HEX5BHEX5D_10755807(lastIndex_10740629[0], kmer_10740631), Tmp14)[0][Tmp14[1]])]);                  }                if (Tmp13) {
                (Tmp15 = HEX5BHEX5D_10830795(result_10730356[0], kmer_10740631), Tmp15)[0][Tmp15[1]].push(subInt(i_10740630, (Tmp16 = HEX5BHEX5D_10755807(lastIndex_10740629[0], kmer_10740631), Tmp16)[0][Tmp16[1]]));;
                }
                
                HEX5BHEX5DHEX3D_10835299(lastIndex_10740629[0], kmer_10740631, i_10740630);
                res_11025893 = subInt(res_11025893, 1);
              }
          } while(false);
        } while(false);
      }
      
    } while(false);

  return result_10730356[0];

}
function returnTimeDistribution_11010082(x_11010084, k_11010085, pairwise_11010086, reverseComplement_11010087) {
  var result_11010095 = ({data: [], counter: 0});

    if ((pairwise_11010086 && reverseComplement_11010087)) {
    raiseException({message: makeNimstrLit("Both pairwise and reverseComplement cannot be true"), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
    }
    
    if (pairwise_11010086) {
    nimCopy(result_11010095, returnTimeDistribution_10920824(pairwiseKmerReturnTimes_10905057(x_11010084, k_11010085)), NTI10920845);
    }
    else {
    if (reverseComplement_11010087) {
    nimCopy(result_11010095, returnTimeDistribution_10920824(reverseComplementReturnTimes_10915915(x_11010084, k_11010085)), NTI10920845);
    }
    else {
      nimCopy(result_11010095, returnTimeDistribution_10920824(sameKmerReturnTimes_10730328(x_11010084, k_11010085)), NTI10920845);
    }
    }

  return result_11010095;

}
function len_11016282(t_11016287) {
  var result_11016288 = 0;

    result_11016288 = t_11016287.counter;

  return result_11016288;

}
function addEscapedChar_1570414(s_1570417, s_1570417_Idx, c_1570418) {
    switch (c_1570418) {
    case 7:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\a"));;
      break;
    case 8:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\b"));;
      break;
    case 9:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\t"));;
      break;
    case 10:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\n"));;
      break;
    case 11:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\v"));;
      break;
    case 12:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\f"));;
      break;
    case 13:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\c"));;
      break;
    case 27:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\e"));;
      break;
    case 92:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\\\"));;
      break;
    case 39:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\\'"));;
      break;
    case 34:
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\\""));;
      break;
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
      addChar(s_1570417[s_1570417_Idx], c_1570418);;
      break;
    default: 
      s_1570417[s_1570417_Idx].push.apply(s_1570417[s_1570417_Idx], makeNimstrLit("\\x"));;
      var n_1570434 = c_1570418;
      addChar(s_1570417[s_1570417_Idx], makeNimstrLit("0123456789ABCDEF")[chckIndx(((n_1570434 & 240) >> 4), 0, (makeNimstrLit("0123456789ABCDEF")).length-1)]);;
      addChar(s_1570417[s_1570417_Idx], makeNimstrLit("0123456789ABCDEF")[chckIndx((n_1570434 & 15), 0, (makeNimstrLit("0123456789ABCDEF")).length-1)]);;
      break;
    }

  
}
function addQuoted_11025231(s_11025234, s_11025234_Idx, x_11025235) {
    s_11025234[s_11025234_Idx].push.apply(s_11025234[s_11025234_Idx], makeNimstrLit("\""));;
    L1: do {
      var c_11025402 = 0;
      var i_11025914 = 0;
      var L_11025915 = (x_11025235).length;
      L2: do {
          L3: while (true) {
          if (!(i_11025914 < L_11025915)) break L3;
            c_11025402 = x_11025235[chckIndx(i_11025914, 0, (x_11025235).length-1)];
            if ((c_11025402 <= 127)) {
            addEscapedChar_1570414(s_11025234, s_11025234_Idx, c_11025402);
            }
            else {
            addChar(s_11025234[s_11025234_Idx], c_11025402);;
            }
            
            i_11025914 = addInt(i_11025914, 1);
            if (!(((x_11025235).length == L_11025915))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(222, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    s_11025234[s_11025234_Idx].push.apply(s_11025234[s_11025234_Idx], makeNimstrLit("\""));;

  
}
function addFloat_1555219(result_1555222, result_1555222_Idx, x_1555223) {
    result_1555222[result_1555222_Idx].push.apply(result_1555222[result_1555222_Idx], cstrToNimstr(nimFloatToString(x_1555223)));;

  
}
function addQuoted_11025418(s_11025421, s_11025421_Idx, x_11025422) {
    addFloat_1555219(s_11025421, s_11025421_Idx, x_11025422);

  
}
function HEX24_11016149(t_11016154) {
  var result_11016155 = [[]];

    if ((len_11016282(t_11016154) == 0)) {
    result_11016155[0] = nimCopy(null, makeNimstrLit("{:}"), NTI1188013);
    }
    else {
      result_11016155[0] = nimCopy(null, makeNimstrLit("{"), NTI1188013);
      L1: do {
        var key_11025229 = [];
        var val_11025230 = 0.0;
        var L_11025905 = len_11016282(t_11016154);
        L2: do {
          var h_11025907 = 0;
          var colontmp__11025908 = 0;
          colontmp__11025908 = (t_11016154.data).length - 1;
          var res_11025909 = 0;
          L3: do {
              L4: while (true) {
              if (!(res_11025909 <= colontmp__11025908)) break L4;
                h_11025907 = res_11025909;
                if (isFilled_10566218(t_11016154.data[chckIndx(h_11025907, 0, (t_11016154.data).length-1)].Field0)) {
                key_11025229 = t_11016154.data[chckIndx(h_11025907, 0, (t_11016154.data).length-1)].Field1;
                val_11025230 = t_11016154.data[chckIndx(h_11025907, 0, (t_11016154.data).length-1)].Field2;
                if ((1 < (result_11016155[0]).length)) {
                result_11016155[0].push.apply(result_11016155[0], makeNimstrLit(", "));;
                }
                
                addQuoted_11025231(result_11016155, 0, key_11025229);
                result_11016155[0].push.apply(result_11016155[0], makeNimstrLit(": "));;
                addQuoted_11025418(result_11016155, 0, val_11025230);
                if (!((len_11016282(t_11016154) == L_11025905))) {
                failedAssertImpl_1305480(makeNimstrLit("tables.nim(681, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                res_11025909 = addInt(res_11025909, 1);
              }
          } while(false);
        } while(false);
      } while(false);
      result_11016155[0].push.apply(result_11016155[0], makeNimstrLit("}"));;
    }
    

  return result_11016155[0];

}
function reverseComplementReturnTimeDistribution(x_11016029, k_11016030) {
  var result_11016031 = null;

  BeforeRet: do {
    var resTable_11016032 = returnTimeDistribution_11010082(cstrToNimstr(x_11016029), k_11016030, false, true);
    result_11016031 = toJSStr(HEX24_11016149(resTable_11016032));
    break BeforeRet;
  } while (false);

  return result_11016031;

}
function sameKmerReturnTimeDistribution(x_11025919, k_11025920) {
  var result_11025921 = null;

  BeforeRet: do {
    var resTable_11025922 = returnTimeDistribution_11010082(cstrToNimstr(x_11025919), k_11025920, false, false);
    result_11025921 = toJSStr(HEX24_11016149(resTable_11025922));
    break BeforeRet;
  } while (false);

  return result_11025921;

}
function pairwiseReturnTimeDistribution(x_11026060, k_11026061) {
  var result_11026062 = null;

  BeforeRet: do {
    var resTable_11026063 = returnTimeDistribution_11010082(cstrToNimstr(x_11026060), k_11026061, true, false);
    result_11026062 = toJSStr(HEX24_11016149(resTable_11026063));
    break BeforeRet;
  } while (false);

  return result_11026062;

}
